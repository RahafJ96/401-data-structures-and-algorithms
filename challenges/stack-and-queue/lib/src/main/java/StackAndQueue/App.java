/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package StackAndQueue;

import Animals.Cats;
import Animals.Dogs;
import Animals.AllAnimals;
import Game.DuckDuckGooseGame;
import StackQueueBraclets.BracketValidation;

public class App {
    public static void main(String[] args) throws Exception {

        System.out.println("Hello");

        Stack stack = new Stack();
        stack.push("R");
        stack.push("A");
        stack.push("H");
        stack.push("A");
        stack.push("F");

        System.out.println(stack);
        System.out.println("top element of Stack :" +stack.peek());
        System.out.println(stack.pop());
        System.out.println(stack.pop());
        System.out.println(stack.pop());
        System.out.println(stack.pop());
        System.out.println(stack.pop());
        System.out.println(stack.pop());

        Queue queue = new Queue();
        queue.enqueue("A");
        queue.enqueue("B");
        queue.enqueue("C");
        queue.enqueue("D");
        queue.enqueue("E");
        System.out.println(queue);
        System.out.println("top element of Queue :" + queue.peek());
        System.out.println(queue.dequeue());
        System.out.println(queue.dequeue());
        System.out.println(queue.dequeue());
        System.out.println(queue.dequeue());
        System.out.println(queue.dequeue());
        System.out.println(queue.dequeue());


        PseudoQueue MultiStack = new PseudoQueue();
        System.out.println("1- pushing => " + MultiStack.enqueue("H"));
        System.out.println("2- pushing => " + MultiStack.enqueue("E"));
        System.out.println("3- pushing => " + MultiStack.enqueue("L"));
        System.out.println("4- pushing => " + MultiStack.enqueue("L"));
        System.out.println("5- pushing => " + MultiStack.enqueue("O"));

        System.out.println("*************************************************");

        System.out.println("1- poping => " + MultiStack.dequeue());
        System.out.println("2- poping => " + MultiStack.dequeue());
        System.out.println("3- poping => " + MultiStack.dequeue());
        System.out.println("4- poping => " + MultiStack.dequeue());
        System.out.println("5- poping => " + MultiStack.dequeue());

        AnimalShelter animalShelter = new AnimalShelter();
        animalShelter.enqueue(new Animal("cats"));
        animalShelter.enqueue(new Animal("dogs"));

        animalShelter.enqueue(new Animal("cats"));

        System.out.println(animalShelter.dequeue("cats"));
        System.out.println(animalShelter.dequeue("cats"));
        System.out.println(animalShelter.dequeue("cats"));
        System.out.println(animalShelter.dequeue("dogs"));
        System.out.println(animalShelter.dequeue("dogs"));
    }
}
