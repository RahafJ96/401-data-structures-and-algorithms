/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package StackAndQueue;

import Animals.Cats;
import Animals.Dogs;
import Animals.AllAnimals;
import Game.DuckDuckGooseGame;
import StackQueueBraclets.BracketValidation;

public class App {
    public static void main(String[] args) throws Exception {

        System.out.println("Hello");

<<<<<<< HEAD

        //stackDemo();
        //queueDemo();

        //pseudoQueueDemo();

        animalShelterDemo();

        //bracketValidate();
    }

    public static void stackDemo() throws Exception {
=======
>>>>>>> dfa807c4865b6db66f9125a3ebadc1a62c3232ae
        Stack stack = new Stack();
        stack.push("R");
        stack.push("A");
        stack.push("H");
        stack.push("A");
        stack.push("F");

        System.out.println(stack);
        System.out.println("top element of Stack :" +stack.peek());
        System.out.println(stack.pop());
        System.out.println(stack.pop());
        System.out.println(stack.pop());
        System.out.println(stack.pop());
        System.out.println(stack.pop());
        System.out.println(stack.pop());

        Queue queue = new Queue();
        queue.enqueue("A");
        queue.enqueue("B");
        queue.enqueue("C");
        queue.enqueue("D");
        queue.enqueue("E");
        System.out.println(queue);
        System.out.println("top element of Queue :" + queue.peek());
        System.out.println(queue.dequeue());
        System.out.println(queue.dequeue());
        System.out.println(queue.dequeue());
        System.out.println(queue.dequeue());
        System.out.println(queue.dequeue());
        System.out.println(queue.dequeue());

<<<<<<< HEAD
        animalShelter.enqueue(cat1);
        animalShelter.enqueue(cat2);
        animalShelter.enqueue(dog1);
        animalShelter.enqueue(dog2);
        animalShelter.enqueue(hamster1);
        animalShelter.enqueue(hamster2);
        System.out.println("\n"+"<<<<<<<<<<<< Animal Shelter >>>>>>>>>>>>");
=======
>>>>>>> dfa807c4865b6db66f9125a3ebadc1a62c3232ae

        PseudoQueue MultiStack = new PseudoQueue();
        System.out.println("enqueue => " + MultiStack.enqueue("H"));
        System.out.println("enqueue => " + MultiStack.enqueue("E"));
        System.out.println("enqueue => " + MultiStack.enqueue("L"));
        System.out.println("enqueue => " + MultiStack.enqueue("L"));
        System.out.println("enqueue => " + MultiStack.enqueue("O"));

        System.out.println("*************************************************");

        System.out.println("dequeue => " + MultiStack.dequeue());
        System.out.println("dequeue => " + MultiStack.dequeue());
        System.out.println("dequeue => " + MultiStack.dequeue());
        System.out.println("dequeue => " + MultiStack.dequeue());
        System.out.println("dequeue => " + MultiStack.dequeue());

        AnimalShelter animalShelter = new AnimalShelter();
        animalShelter.enqueue(new Animal("cats"));
        animalShelter.enqueue(new Animal("dogs"));

        animalShelter.enqueue(new Animal("cats"));

        System.out.println(animalShelter.dequeue("cats"));
        System.out.println(animalShelter.dequeue("cats"));
        System.out.println(animalShelter.dequeue("cats"));
        System.out.println(animalShelter.dequeue("dogs"));
        System.out.println(animalShelter.dequeue("dogs"));

<<<<<<< HEAD
        System.out.println(animalShelter.dequeue("duck"));
=======
        System.out.println("Is Brackets Validate [[{(rahaf)}]] ? "+App.bracketsValidate("[[{(rahaf)}]]"));
        System.out.println("Is Brackets Validate [[{() ? "+App.bracketsValidate("[[{()"));
        System.out.println("Is Brackets Validate [[]] ? "+App.bracketsValidate("[[]]"));
>>>>>>> dfa807c4865b6db66f9125a3ebadc1a62c3232ae


    }

    public static boolean bracketsValidate(String value) throws Exception {
        StackGen<Character> brakets = new StackGen<>();

        if(value.length() == 0){
            return false;
        }

        for(int i = 0 ; i < value.length() ; i++){
            if(value.charAt(i) == '{' || value.charAt(i) == '(' || value.charAt(i) == '['){
                brakets.push(value.charAt(i));
            } else if(value.charAt(i) == '}' && brakets.peek() == '{' ){
                brakets.pop();
            }else if(value.charAt(i) == ')' && brakets.peek() == '(' ){
                brakets.pop();
            }else if(value.charAt(i) == ']' && brakets.peek() == '[' ){
                brakets.pop();
            }
        }
        return brakets.isEmpty();
    }


}
