/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package StackAndQueue;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;


public class LibraryTest {
//    @Test
//    public void enqueueTest(){
//
//        PseudoQueue pseudoQueue = new PseudoQueue();
//
//        pseudoQueue.enqueue(11);
//        assertEquals("Stack { 11 --> Null }",pseudoQueue.toString());
//        pseudoQueue.enqueue(6);
//        pseudoQueue.enqueue(2017);
//        assertEquals(11,pseudoQueue.stack1.peek());
//        assertEquals("Stack { 11 --> 6 --> 2017 --> Null }",pseudoQueue.toString());
//        assertFalse(pseudoQueue.stack1.isEmpty());
//    }
//
//    @Test
//    public void dequeueTest(){
//        PseudoQueue pseudoQueue = new PseudoQueue();
//        pseudoQueue.enqueue(11);
//        pseudoQueue.enqueue(6);
//        pseudoQueue.enqueue(2017);
//
//        assertEquals(11 ,pseudoQueue.dequeue());
//        assertEquals("Stack { 6 --> 2017 --> NULL }",pseudoQueue.toString());
//        pseudoQueue.dequeue();
//        pseudoQueue.dequeue();
//        assertTrue(pseudoQueue.stack1.isEmpty());
//        assertEquals("Stack { NULL }",pseudoQueue.toString());
//        assertEquals(new IllegalArgumentException("Empty"),pseudoQueue.dequeue());
//    }

    @Test
    public void enqueueAnimalShelterTest(){

        AnimalShelter shelterTest = new AnimalShelter();

        shelterTest.enqueue(new Cat("lala"));
        shelterTest.enqueue(new Cat("coco"));
        assertEquals("AnimalShelter { catQueue = Queue { lala --> coco --> Null }, dogQueue = Queue { Null } }",shelterTest.toString());
        assertEquals("lala", shelterTest.catQueue.peek().toString());

        shelterTest.enqueue(new Dog("rex"));
        shelterTest.enqueue(new Dog("blaze"));
        assertEquals("AnimalShelter { catQueue = Queue { lala --> coco --> Null }, dogQueue = Queue { rex --> blaze --> Null } }",shelterTest.toString());
        assertEquals("rex", shelterTest.dogQueue.peek().toString());

        assertFalse(shelterTest.catQueue.isEmpty());
        assertFalse(shelterTest.dogQueue.isEmpty());

        shelterTest.dequeue("cat");
        assertEquals("AnimalShelter { catQueue = Queue { coco --> Null }, dogQueue = Queue { rex --> blaze --> Null } }",shelterTest.toString());

        shelterTest.dequeue("dog");
        assertEquals("AnimalShelter { catQueue = Queue { coco --> Null }, dogQueue = Queue { blaze --> Null } }",shelterTest.toString());

        shelterTest.dequeue("cat");
        shelterTest.dequeue("dog");
        assertEquals("AnimalShelter { catQueue = Queue { Null }, dogQueue = Queue { Null } }",shelterTest.toString());
        assertTrue(shelterTest.catQueue.isEmpty());
        assertTrue(shelterTest.dogQueue.isEmpty());

        assertNull(shelterTest.dequeue("cat"));
        assertNull(shelterTest.dequeue("dog"));
    }
}