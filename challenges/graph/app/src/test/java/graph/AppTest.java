/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package graph;

import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
// code challenge 35

    @Test
    public void addVertex(){

        Graph graph = new Graph();

        graph.addVertex("Rahaf");
        graph.addVertex("Roaa");

        assertNotNull(graph.getVertices());
        assertEquals(2,graph.size());
    }

    @Test
    public void addEdge(){

        Graph graph = new Graph();

        graph.addVertex("Rahaf");
        graph.addVertex("Ola");
        graph.addEdge("Rahaf", "Ola");

        assertEquals("Vertex{label='Ola', weight=0}[Vertex{label='Rahaf', weight=0}]Vertex{label='Rahaf', weight=0}[Vertex{label='Ola', weight=0}]", graph.printGraph());
    }

    @Test
    public void vertexNeighbors(){

        Graph graph = new Graph();

        graph.addVertex("Rahaf");
        graph.addVertex("Ola");
        graph.addVertex("Abdalla");
        graph.addVertex("Roaa");
        graph.addEdge("Rahaf", "Abdalla");
        graph.addEdge("Rahaf", "Ola");
        graph.addEdge("Roaa", "Ola");

        assertEquals("[Vertex{label='Abdalla', weight=0}, Vertex{label='Ola', weight=0}]",graph.getNeighbors("Rahaf").toString());
        assertEquals("[Vertex{label='Ola', weight=0}]", graph.getNeighbors("Roaa").toString());

    }

    @Test
    public void emptyGraph(){

        Graph graph = new Graph();
        assertEquals(0,graph.size());
        assertEquals("[]", graph.getVertices().toString());
    }

    @Test
    public void removeVertex(){

        Graph graph = new Graph();

        graph.addVertex("Rahaf");
        graph.addVertex("Roaa");
        graph.addEdge("Rahaf", "Roaa");
        assertEquals("Vertex{label='Roaa', weight=0}[Vertex{label='Rahaf', weight=0}]Vertex{label='Rahaf', weight=0}[Vertex{label='Roaa', weight=0}]",graph.printGraph());
        assertEquals(2, graph.size());

        graph.removeVertex("Rahaf");
        assertEquals("Vertex{label='Roaa', weight=0}[]",graph.printGraph());
        assertEquals(1, graph.size());
    }

    @Test
    public void removeEdge(){
        Graph graph = new Graph();

        graph.addVertex("Rahaf");
        graph.addVertex("Roaa");
        graph.addEdge("Rahaf", "Roaa");
        assertEquals("Vertex{label='Roaa', weight=0}[Vertex{label='Rahaf', weight=0}]Vertex{label='Rahaf', weight=0}[Vertex{label='Roaa', weight=0}]",graph.printGraph());

        graph.removeEdge("Roaa", "Rahaf");
        assertEquals("Vertex{label='Roaa', weight=0}[]Vertex{label='Rahaf', weight=0}[]", graph.printGraph());
    }

    @Test
    public void oneVertexAndOneEdge(){
        Graph graph = new Graph();

        graph.addVertex("Rahaf");
        graph.removeEdge("Rahaf","Rahaf");

        assertEquals("Vertex{label='Rahaf', weight=0}[]",graph.printGraph());
    }

    // code challenge 37
    @Test
    public void businessTripTest(){

        Graph graph2 = new Graph();

        graph2.addVertex("Pandora");
        graph2.addVertex("Arendelle");
        graph2.addVertex("Metroville");
        graph2.addVertex("Monstroplolis");

        graph2.addEdgeWithWeight("Pandora", "Arendelle", 150);
        graph2.addEdgeWithWeight("Arendelle", "Metroville",99);
        graph2.addEdgeWithWeight("Arendelle", "Monstroplolis",42);

        List<String> cities1 = new ArrayList<>();
        cities1.add("Pandora");
        cities1.add("Arendelle");
        assertEquals(150, graph2.businessTrip(graph2, cities1));

        List<String> cities2 = new ArrayList<>();
        cities2.add("Pandora");
        cities2.add("Arendelle");
        cities2.add("Monstroplolis");
        assertEquals(192, graph2.businessTrip(graph2, cities2));

    }

    @Test
    public void businessTripNoEdge(){

        Graph graph2 = new Graph();

        graph2.addVertex("Pandora");
        graph2.addVertex("Arendelle");
        graph2.addVertex("Metroville");
        graph2.addVertex("Monstroplolis");

        graph2.addEdgeWithWeight("Pandora", "Arendelle", 150);
        graph2.addEdgeWithWeight("Arendelle", "Metroville",99);
        graph2.addEdgeWithWeight("Arendelle", "Monstroplolis",42);

        List<String> cities1 = new ArrayList<>();
        cities1.add("Pandora");
        cities1.add("Monstroplolis");
        assertEquals(0, graph2.businessTrip(graph2, cities1));
    }

    @Test
    public void businessTripAtLeastOnoEdge(){

        Graph graph2 = new Graph();

        graph2.addVertex("Pandora");
        graph2.addVertex("Arendelle");
        graph2.addVertex("Metroville");
        graph2.addVertex("Monstroplolis");
        graph2.addVertex("Naboo");

        graph2.addEdgeWithWeight("Pandora", "Arendelle", 150);
        graph2.addEdgeWithWeight("Arendelle", "Metroville",99);
        graph2.addEdgeWithWeight("Arendelle", "Monstroplolis",42);
        graph2.addEdgeWithWeight("Naboo", "Monstroplolis",42);


        List<String> cities1 = new ArrayList<>();
        cities1.add("Pandora");
        cities1.add("Naboo");
        cities1.add("Monstroplolis");
        assertEquals(42, graph2.businessTrip(graph2, cities1));
    }

    // code challenge 38

    @Test
    public void depthFirstTest(){

        Graph graph3 = new Graph();

        graph3.addVertex("A");
        graph3.addVertex("B");
        graph3.addVertex("C");
        graph3.addVertex("D");
        graph3.addVertex("E");
        graph3.addVertex("F");
        graph3.addVertex("G");
        graph3.addVertex("H");

        graph3.addEdge("A", "D");
        graph3.addEdge("A", "B");
        graph3.addEdge("B", "D");
        graph3.addEdge("B", "C");
        graph3.addEdge("C", "G");
        graph3.addEdge("D", "F");
        graph3.addEdge("D", "H");
        graph3.addEdge("D", "E");
        graph3.addEdge("F", "H");

        assertEquals("[A, B, C, G, D, E, H, F]", graph3.depthFirstTraverse("A").toString());
    }

    @Test
    public void depthFirstOneVertex(){

        Graph graph3 = new Graph();

        graph3.addVertex("A");

        assertEquals("[A]", graph3.depthFirstTraverse("A").toString());
    }
}
