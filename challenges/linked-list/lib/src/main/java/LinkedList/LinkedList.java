/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package LinkedList;

import LinkedList.Node;
import java.util.Objects;

public class LinkedList {
    Node head;
    private  int size = 0;

    public int size(){
        return size;
    }


    // insert new node at the start of linked list
    public void insert(String data) {
        Node node = new Node(data);
        if (size == 0) {
            head = node;
        } else {
            Node current = head;
            while (current.getNext() != null) {
                current = current.getNext();
            }
            current.setNext(node);
        }
        size++;
    }
    // check for a node value if exists
    public boolean includes(String data) {
        if (size != 0) {
            Node current = head;
            while (current != null) {
                if (Objects.equals(current.getData(),data)) {
                    return true;
                }
                current = current.getNext();
            }
        }
        return false;
    }

    public void append(String new_data) {
        Node new_node = new Node(new_data);
        if (head == null) {
            head = new Node(new_data);
            return;
        }
        new_node.next = null;
        Node last = head;
        while (last.next != null)
            last = last.next;
        last.next = new_node;
        return;
    }

    public void insertBefore(String ref,String data){
        //Node current= insertBeforeNode.start;
        if(head !=null){
            if(ref == head.data){
                Node insertBeforeNode=new Node(data);
                insertBeforeNode.next = head;
                head = insertBeforeNode;

            }
            else {
                Node current = head;
                Node previousNode = current;
                while (current != null) {
                    if (ref == current.data) {
                        Node newNode = new Node(data);
                        newNode.next = current;
                        previousNode.next = newNode;
                        break;
                    }
                    previousNode = current;
                    current = current.next;
                }
            }
        }
        else{
            System.out.println("This list is Empty");
        }
    }

    public void insertAfter(String ref,String data){


        Node current = head;
        while (current != null) {
            if (current.data==ref) {
                Node newNode = new Node(data);
                newNode.next = current.next;
                current.next = newNode;
                break;

            }
            current = current.next;
        }
        if(current==null){
            insert(data);
        }
    }

    @Override
    public String toString() {
        StringBuilder stringPrint = new StringBuilder();
        if(size == 0){
            return "The list is empty";
        }else{

            Node current = head;
            while (current != null){
                stringPrint.append("{ ").append(current.getData()).append(" }").append(" --> ");
                current = current.getNext();
            }
            stringPrint.append("NULL");
        }
        return stringPrint.toString();
    }


}