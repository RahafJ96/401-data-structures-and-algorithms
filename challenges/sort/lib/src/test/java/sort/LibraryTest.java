/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package sort;

import merge.Merge;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import quick.Quick;

import java.util.Arrays;

import static org.junit.jupiter.api.Assertions.*;

class LibraryTest {

    @Test
    @DisplayName("selectionSortTest")
    public void selectionSortTest(){

        int[] arr1 = {8, 4, 23, 42, 16, 15};

        InsertionSort selectionSort = new InsertionSort();
        selectionSort.selectionSort(arr1);
        assertEquals("[4, 8, 15, 16, 23, 42]", Arrays.toString(arr1));
    }

    @Test
    @DisplayName("reverseSortedTest")
    public void reverseSortedTest(){

        int [] arr2 ={20, 18, 12, 8, 5, -2};
        InsertionSort selectionSort = new InsertionSort();
        selectionSort.selectionSort(arr2);
        assertEquals("[-2, 5, 8, 12, 18, 20]", Arrays.toString(arr2));

    }

    @Test
    @DisplayName("fewUniquesTest")
    public void fewUniquesTest(){
        int [] arr3 = {5, 12, 7, 5, 5, 7};
        InsertionSort selectionSort = new InsertionSort();
        selectionSort.selectionSort(arr3);
        assertEquals("[5, 5, 5, 7, 7, 12]", Arrays.toString(arr3));

    }

    @Test
    @DisplayName("nearlySortedTest")
    public void nearlySortedTest(){
        int [] arr4 = {2, 3, 5, 7, 13, 11};
        InsertionSort selectionSort = new InsertionSort();
        selectionSort.selectionSort(arr4);
        assertEquals("[2, 3, 5, 7, 11, 13]", Arrays.toString(arr4));

    }

    @Test
    public void mergeSortTest1(){

        int [] mergeArr1 = {8, 4, 23, 42, 16, 15};
        Merge mergeSort = new Merge();
        mergeSort.mergeSort(mergeArr1);
        assertEquals("[4, 8, 15, 16, 23, 42]",Arrays.toString(mergeArr1));
    }

    @Test
    public void mergeSortTest2(){

        int [] mergeArr2 = {20, 18, 12, 8, 5, -2};
        Merge mergeSort = new Merge();
        mergeSort.mergeSort(mergeArr2);
        assertEquals("[-2, 5, 8, 12, 18, 20]",Arrays.toString(mergeArr2));
    }

    @Test
    public void mergeSortTest3(){

        int [] mergeArr3 = {5, 12, 7, 5, 5, 7};
        Merge mergeSort = new Merge();
        mergeSort.mergeSort(mergeArr3);
        assertEquals("[5, 5, 5, 7, 7, 12]",Arrays.toString(mergeArr3));
    }

    @Test
    public void mergeSortTest4(){

        int [] mergeArr4 = {2, 3, 5, 7, 13, 11,17};
        Merge mergeSort = new Merge();
        mergeSort.mergeSort(mergeArr4);
        assertEquals("[2, 3, 5, 7, 11, 13, 17]",Arrays.toString(mergeArr4));
    }

    @Test
    public void mergeSortTest5(){

        int [] mergeArr5 = {2};
        Merge mergeSort = new Merge();
        mergeSort.mergeSort(mergeArr5);
        assertEquals("[2]",Arrays.toString(mergeArr5));
    }


    @Test
    public void quickSortTest1(){

        int[] quickSortArr1 = {8, 4, 23, 42, 16, 15};
        Quick quickSort = new Quick();

        quickSort.quickSort(quickSortArr1,0,5);
        assertEquals("[4, 8, 15, 16, 23, 42]", Arrays.toString(quickSortArr1));
    }

    @Test
    public void quickSortTest2(){

        int[] quickSortArr2 = {20, 18, 12, 8, 5, -2};
        Quick quickSort = new Quick();

        quickSort.quickSort(quickSortArr2,0,5);
        assertEquals("[-2, 5, 8, 12, 18, 20]", Arrays.toString(quickSortArr2));
    }

    @Test
    public void quickSortTest3(){

        int[] quickSortArr3 = {5, 12, 7, 5, 5, 7};
        Quick quickSort = new Quick();

        quickSort.quickSort(quickSortArr3,0,5);
        assertEquals("[5, 5, 5, 7, 7, 12]", Arrays.toString(quickSortArr3));
    }

    @Test
    public void quickSortTest4(){

        int[] quickSortArr4 = {2, 3, 5, 7, 13, 11,17};
        Quick quickSort = new Quick();

        quickSort.quickSort(quickSortArr4,0,5);
        assertEquals("[2, 3, 5, 7, 11, 13, 17]", Arrays.toString(quickSortArr4));
    }

    @Test
    public void quickSortTest5(){

        int[] quickSortArr5 = {2};
        Quick quickSort = new Quick();

        quickSort.quickSort(quickSortArr5,0,5);
        assertEquals("[2]", Arrays.toString(quickSortArr5));
    }
}
